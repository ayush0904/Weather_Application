[{"/Users/ayushtripathi/Desktop/Weather_Application/src/index.js":"1","/Users/ayushtripathi/Desktop/Weather_Application/src/App.js":"2","/Users/ayushtripathi/Desktop/Weather_Application/src/reportWebVitals.js":"3","/Users/ayushtripathi/Desktop/Weather_Application/src/services/weatherService.js":"4","/Users/ayushtripathi/Desktop/Weather_Application/src/components/Forecast.jsx":"5","/Users/ayushtripathi/Desktop/Weather_Application/src/components/Inputs.jsx":"6","/Users/ayushtripathi/Desktop/Weather_Application/src/components/TemperatureAndDetails.jsx":"7","/Users/ayushtripathi/Desktop/Weather_Application/src/components/TimeAndLocation.jsx":"8","/Users/ayushtripathi/Desktop/Weather_Application/src/components/TopButtons.jsx":"9"},{"size":499,"mtime":1683165033132,"results":"10","hashOfConfig":"11"},{"size":2511,"mtime":1683243299269,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1683149151050,"results":"13","hashOfConfig":"11"},{"size":3515,"mtime":1683244329176,"results":"14","hashOfConfig":"11"},{"size":957,"mtime":1683243314872,"results":"15","hashOfConfig":"11"},{"size":2715,"mtime":1683243275255,"results":"16","hashOfConfig":"11"},{"size":2870,"mtime":1683242980417,"results":"17","hashOfConfig":"11"},{"size":612,"mtime":1683242912005,"results":"18","hashOfConfig":"11"},{"size":744,"mtime":1683185245268,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"nevmwb",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/ayushtripathi/Desktop/Weather_Application/src/index.js",[],[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/App.js",[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/reportWebVitals.js",[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/services/weatherService.js",["49","50","51","52","53"],[],"import { DateTime,IANAZone,FixedOffsetZone } from \"luxon\";\nconst API_KEY = process.env.REACT_APP_API_URL;  // API KEY Store in .env file\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n    timezone,\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n    timezone,\n  };\n};\n\n\n\nconst formatForecastWeather = (data) => {\n    let { list } = data;\n    let {timezone} = data.city;\n    let uniqueDates = [];\n    let daily = list\n    .filter((obj) => {\n      const currentDate = new Date(obj.dt_txt.replace(/-/g, \"/\")); // Replace '-' with '/' for Safari compatibility\n      const currentDateString = currentDate.toDateString();\n      if (!uniqueDates.includes(currentDateString)) {\n        uniqueDates.push(currentDateString);\n        return true;\n      }\n      return false;\n    })\n    .map((d) => {\n      const currentDate = new Date(d.dt_txt.replace(/-/g, \"/\"));\n      const currentDay = currentDate.toLocaleDateString(undefined, { weekday: \"short\" });\n      return {\n        title: currentDay,\n        temp: d.main.temp,\n        icon: d.weather[0].icon,\n      };\n    });\n\n    let hourly = list.slice(1, 6).map((d) => {\n        return {\n        title: formatToLocalTime(d.dt, timezone,\n          {hour: 'numeric',\n          minute: 'numeric',\n          hour12: true}),\n        temp: d.main.temp,\n        icon: d.weather[0].icon,\n        };\n    });\n  \n\n  return { timezone, daily, hourly};\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData(\n    \"weather\",\n    searchParams\n  ).then(formatCurrentWeather);\n\n  const { lat, lon } = formattedCurrentWeather;\n\n  const formattedForecastWeather = await getWeatherData(\n    \"forecast\",\n    searchParams\n  ).then(formatForecastWeather);\n\n  return { ...formattedCurrentWeather, ...formattedForecastWeather };\n};\n\nconst formatToLocalTime = (\n  secs,\n  zone,\n  options = {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n    timeZoneName: 'short'\n  },\n) => {try {\n\nconst timestamp = secs; // Unix timestamp in seconds\nconst offset = zone/60; // UTC offset in minutes (-4 hours)\n\nconst date = new Date(timestamp * 1000); // convert timestamp to milliseconds\nconst utc = date.getTime() + (date.getTimezoneOffset() * 60000); // convert to UTC\nconst local = utc + (offset * 60000); // add offset to get local time in milliseconds\n\nconst localDate = new Date(local); // create new Date object for local time\n\nconst formattedDate = localDate.toLocaleString('en-US', options);\n\n\nreturn formattedDate;\n} catch (error) {\n  console.error(error);\n  return \"Invalid time zone name\";\n}\n}\n\n\n\n\nconst iconUrlFromCode = (code) =>\n  `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData;\n\nexport { formatToLocalTime, iconUrlFromCode };","/Users/ayushtripathi/Desktop/Weather_Application/src/components/Forecast.jsx",[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/components/Inputs.jsx",[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/components/TemperatureAndDetails.jsx",[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/components/TimeAndLocation.jsx",[],[],"/Users/ayushtripathi/Desktop/Weather_Application/src/components/TopButtons.jsx",[],[],{"ruleId":"54","severity":1,"message":"55","line":1,"column":10,"nodeType":"56","messageId":"57","endLine":1,"endColumn":18},{"ruleId":"54","severity":1,"message":"58","line":1,"column":19,"nodeType":"56","messageId":"57","endLine":1,"endColumn":27},{"ruleId":"54","severity":1,"message":"59","line":1,"column":28,"nodeType":"56","messageId":"57","endLine":1,"endColumn":43},{"ruleId":"54","severity":1,"message":"60","line":93,"column":11,"nodeType":"56","messageId":"57","endLine":93,"endColumn":14},{"ruleId":"54","severity":1,"message":"61","line":93,"column":16,"nodeType":"56","messageId":"57","endLine":93,"endColumn":19},"no-unused-vars","'DateTime' is defined but never used.","Identifier","unusedVar","'IANAZone' is defined but never used.","'FixedOffsetZone' is defined but never used.","'lat' is assigned a value but never used.","'lon' is assigned a value but never used."]