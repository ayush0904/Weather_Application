{"ast":null,"code":"const API_KEY = process.env.REACT_APP_API_URL; // API KEY Store in .env file\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    },\n    timezone\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n    timezone\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    list\n  } = data;\n  let {\n    timezone\n  } = data.city;\n  let uniqueDates = [];\n  let daily = list.filter(obj => {\n    const currentDate = new Date(obj.dt_txt.replace(/-/g, \"/\")); // Replace '-' with '/' for Safari compatibility\n    const currentDateString = currentDate.toDateString();\n    if (!uniqueDates.includes(currentDateString)) {\n      uniqueDates.push(currentDateString);\n      return true;\n    }\n    return false;\n  }).map(d => {\n    const currentDate = new Date(d.dt_txt.replace(/-/g, \"/\"));\n    const currentDay = currentDate.toLocaleDateString(undefined, {\n      weekday: \"short\"\n    });\n    return {\n      title: currentDay,\n      temp: d.main.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  let hourly = list.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true\n      }),\n      temp: d.main.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n  const formattedForecastWeather = await getWeatherData(\"forecast\", searchParams).then(formatForecastWeather);\n  return {\n    ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n};\nconst formatToLocalTime = function (secs, zone) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"short\",\n    year: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n    timeZoneName: \"short\"\n  };\n  try {\n    const timestamp = secs; // Unix timestamp in seconds\n    const offset = zone / 60; // UTC offset in minutes (-4 hours)\n\n    const date = new Date(timestamp * 1000); // convert timestamp to milliseconds\n    const utc = date.getTime() + date.getTimezoneOffset() * 60000; // convert to UTC\n    const local = utc + offset * 60000; // add offset to get local time in milliseconds\n\n    const localDate = new Date(local); // create new Date object for local time\n\n    const formattedDate = localDate.toLocaleString(\"en-US\", options);\n    return formattedDate;\n  } catch (error) {\n    console.error(error);\n    return \"Invalid time zone name\";\n  }\n};\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["API_KEY","process","env","REACT_APP_API_URL","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","timezone","details","icon","formatForecastWeather","list","city","uniqueDates","daily","filter","obj","currentDate","Date","dt_txt","replace","currentDateString","toDateString","includes","push","map","d","currentDay","toLocaleDateString","undefined","weekday","title","hourly","slice","formatToLocalTime","hour","minute","hour12","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","secs","zone","options","arguments","length","day","month","year","timeZoneName","timestamp","offset","date","utc","getTime","getTimezoneOffset","local","localDate","formattedDate","toLocaleString","error","console","iconUrlFromCode","code"],"sources":["/Users/ayushtripathi/Desktop/Weather_Application/src/services/weatherService.js"],"sourcesContent":["const API_KEY = process.env.REACT_APP_API_URL; // API KEY Store in .env file\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n    timezone,\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n    timezone,\n  };\n};\n\nconst formatForecastWeather = (data) => {\n  let { list } = data;\n  let { timezone } = data.city;\n  let uniqueDates = [];\n  let daily = list\n    .filter((obj) => {\n      const currentDate = new Date(obj.dt_txt.replace(/-/g, \"/\")); // Replace '-' with '/' for Safari compatibility\n      const currentDateString = currentDate.toDateString();\n      if (!uniqueDates.includes(currentDateString)) {\n        uniqueDates.push(currentDateString);\n        return true;\n      }\n      return false;\n    })\n    .map((d) => {\n      const currentDate = new Date(d.dt_txt.replace(/-/g, \"/\"));\n      const currentDay = currentDate.toLocaleDateString(undefined, {\n        weekday: \"short\",\n      });\n      return {\n        title: currentDay,\n        temp: d.main.temp,\n        icon: d.weather[0].icon,\n      };\n    });\n\n  let hourly = list.slice(1, 6).map((d) => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, {\n        hour: \"numeric\",\n        minute: \"numeric\",\n        hour12: true,\n      }),\n      temp: d.main.temp,\n      icon: d.weather[0].icon,\n    };\n  });\n\n  return { timezone, daily, hourly };\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData(\n    \"weather\",\n    searchParams\n  ).then(formatCurrentWeather);\n\n  \n  const formattedForecastWeather = await getWeatherData(\n    \"forecast\",\n    searchParams\n  ).then(formatForecastWeather);\n\n  return { ...formattedCurrentWeather, ...formattedForecastWeather };\n};\n\nconst formatToLocalTime = (\n  secs,\n  zone,\n  options = {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"short\",\n    year: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    hour12: true,\n    timeZoneName: \"short\",\n  }\n) => {\n  try {\n    const timestamp = secs; // Unix timestamp in seconds\n    const offset = zone / 60; // UTC offset in minutes (-4 hours)\n\n    const date = new Date(timestamp * 1000); // convert timestamp to milliseconds\n    const utc = date.getTime() + date.getTimezoneOffset() * 60000; // convert to UTC\n    const local = utc + offset * 60000; // add offset to get local time in milliseconds\n\n    const localDate = new Date(local); // create new Date object for local time\n\n    const formattedDate = localDate.toLocaleString(\"en-US\", options);\n\n    return formattedDate;\n  } catch (error) {\n    console.error(error);\n    return \"Invalid time zone name\";\n  }\n};\n\nconst iconUrlFromCode = (code) =>\n  `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData;\n\nexport { formatToLocalTime, iconUrlFromCode };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}