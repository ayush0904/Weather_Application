{"ast":null,"code":"import { DateTime, IANAZone, FixedOffsetZone } from \"luxon\";\nconst API_KEY = process.env.REACT_APP_API_URL; // API KEY Store in .env file\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst formatCurrentWeather = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      humidity\n    },\n    name,\n    dt,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    },\n    weather,\n    wind: {\n      speed\n    },\n    timezone\n  } = data;\n  const {\n    main: details,\n    icon\n  } = weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n    timezone\n  };\n};\nconst formatForecastWeather = data => {\n  let {\n    list\n  } = data;\n  let {\n    timezone\n  } = data;\n  let daily = list.filter((obj, index, self) => {\n    const currentDate = new Date(obj.dt_txt.replace(/-/g, \"/\")); // Replace '-' with '/' for Safari compatibility\n    return self.findIndex(o => new Date(o.dt_txt.replace(/-/g, \"/\")).toDateString() === currentDate.toDateString()) === index;\n  }).slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, {\n        weekday: 'short'\n      }),\n      temp: d.main.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  let hourly = list.slice(1, 6).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, {\n        hour: 'numeric',\n        minute: 'numeric',\n        hour12: true\n      }),\n      temp: d.main.temp,\n      icon: d.weather[0].icon\n    };\n  });\n  return {\n    timezone,\n    daily,\n    hourly\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedCurrentWeather = await getWeatherData(\"weather\", searchParams).then(formatCurrentWeather);\n  const {\n    lat,\n    lon\n  } = formattedCurrentWeather;\n  const formattedForecastWeather = await getWeatherData(\"forecast\", searchParams).then(formatForecastWeather);\n  return {\n    ...formattedCurrentWeather,\n    ...formattedForecastWeather\n  };\n};\nconst formatToLocalTime = function (secs, zone) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n    timeZoneName: 'short'\n  };\n  try {\n    const timestamp = secs; // Unix timestamp in seconds\n    const offset = zone / 60; // UTC offset in minutes (-4 hours)\n\n    const date = new Date(timestamp * 1000); // convert timestamp to milliseconds\n    const utc = date.getTime() + date.getTimezoneOffset() * 60000; // convert to UTC\n    const local = utc + offset * 60000; // add offset to get local time in milliseconds\n\n    const localDate = new Date(local); // create new Date object for local time\n\n    const formattedDate = localDate.toLocaleString('en-US', options);\n    return formattedDate;\n  } catch (error) {\n    console.error(error);\n    return \"Invalid time zone name\";\n  }\n};\nconst iconUrlFromCode = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, iconUrlFromCode };","map":{"version":3,"names":["DateTime","IANAZone","FixedOffsetZone","API_KEY","process","env","REACT_APP_API_URL","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","formatCurrentWeather","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","humidity","name","dt","sys","country","sunrise","sunset","weather","wind","speed","timezone","details","icon","formatForecastWeather","list","daily","filter","obj","index","self","currentDate","Date","dt_txt","replace","findIndex","o","toDateString","slice","map","d","title","formatToLocalTime","weekday","hourly","hour","minute","hour12","getFormattedWeatherData","formattedCurrentWeather","formattedForecastWeather","secs","zone","options","arguments","length","undefined","day","month","year","timeZoneName","timestamp","offset","date","utc","getTime","getTimezoneOffset","local","localDate","formattedDate","toLocaleString","error","console","iconUrlFromCode","code"],"sources":["/Users/ayushtripathi/Desktop/Weather_Application/src/services/weatherService.js"],"sourcesContent":["import { DateTime,IANAZone,FixedOffsetZone } from \"luxon\";\nconst API_KEY = process.env.REACT_APP_API_URL;  // API KEY Store in .env file\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst formatCurrentWeather = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, humidity },\n    name,\n    dt,\n    sys: { country, sunrise, sunset },\n    weather,\n    wind: { speed },\n    timezone,\n  } = data;\n\n  const { main: details, icon } = weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    humidity,\n    name,\n    dt,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n    speed,\n    timezone,\n  };\n};\n\n\n\nconst formatForecastWeather = (data) => {\n    let { list } = data;\n    let {timezone} = data;\n    let daily = list\n    .filter((obj, index, self) => {\n      const currentDate = new Date(obj.dt_txt.replace(/-/g, \"/\")); // Replace '-' with '/' for Safari compatibility\n      return self.findIndex(o => new Date(o.dt_txt.replace(/-/g, \"/\")).toDateString() === currentDate.toDateString()) === index;\n    })\n    \n    .slice(1, 6).map((d) => {\n        return {\n        title: formatToLocalTime(d.dt, timezone, \n             {weekday: 'short'}\n        ),\n        temp: d.main.temp,\n        icon: d.weather[0].icon,\n        };\n    });\n\n    let hourly = list.slice(1, 6).map((d) => {\n        return {\n        title: formatToLocalTime(d.dt, timezone,\n          {hour: 'numeric',\n          minute: 'numeric',\n          hour12: true}),\n        temp: d.main.temp,\n        icon: d.weather[0].icon,\n        };\n    });\n  \n\n  return { timezone, daily, hourly};\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedCurrentWeather = await getWeatherData(\n    \"weather\",\n    searchParams\n  ).then(formatCurrentWeather);\n\n  const { lat, lon } = formattedCurrentWeather;\n\n  const formattedForecastWeather = await getWeatherData(\n    \"forecast\",\n    searchParams\n  ).then(formatForecastWeather);\n\n  return { ...formattedCurrentWeather, ...formattedForecastWeather };\n};\n\nconst formatToLocalTime = (\n  secs,\n  zone,\n  options = {\n    weekday: 'long',\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true,\n    timeZoneName: 'short'\n  },\n) => {try {\n\nconst timestamp = secs; // Unix timestamp in seconds\nconst offset = zone/60; // UTC offset in minutes (-4 hours)\n\nconst date = new Date(timestamp * 1000); // convert timestamp to milliseconds\nconst utc = date.getTime() + (date.getTimezoneOffset() * 60000); // convert to UTC\nconst local = utc + (offset * 60000); // add offset to get local time in milliseconds\n\nconst localDate = new Date(local); // create new Date object for local time\n\nconst formattedDate = localDate.toLocaleString('en-US', options);\n\n\nreturn formattedDate;\n} catch (error) {\n  console.error(error);\n  return \"Invalid time zone name\";\n}\n}\n\n\n\n\nconst iconUrlFromCode = (code) =>\n  `http://openweathermap.org/img/wn/${code}@2x.png`;\n\nexport default getFormattedWeatherData;\n\nexport { formatToLocalTime, iconUrlFromCode };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}